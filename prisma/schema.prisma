// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  ACTIVE
  INACTIVE
}

enum Provider {
  GOOGLE
  LINE
  AMAZON
  APPLE
  MICROSOFT
}

model Profile {
  id           Int     @id @default(autoincrement())
  userId       String  @unique
  bio          String?
  thumbnailUrl String? @map("thumbnail_url")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  status        Status        @default(ACTIVE)
  profile       Profile?
  questionaries Questionary[]
  threads       Thread[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Questionary {
  id        Int      @id @default(autoincrement())
  userId    String
  answer1   Int?
  answer2   Int?
  answer3   Int?
  answer4   Int?
  grantName String?  @map("grant_name")
  createdAt DateTime @default(now()) @map("created_at")
  thread    Thread?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AiModel {
  id        Int      @id @default(autoincrement())
  modelName String   @map("model_name")
  version   String?
  filePath  String?  @map("file_path")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  threads   Thread[]
}

model Thread {
  id                 Int       @id @default(autoincrement())
  userId             String
  aiModelId          Int
  questionaryId      Int       @unique
  messages           Message[]
  user_message_count Int       @default(0)
  status             Status    @default(ACTIVE)
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @updatedAt @map("updated_at")

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  aiModel     AiModel     @relation(fields: [aiModelId], references: [id])
  questionary Questionary @relation(fields: [questionaryId], references: [id])
}

enum Role {
  USER
  AI
}

model Message {
  id        Int      @id @default(autoincrement())
  threadId  Int
  role      Role?
  createdAt DateTime @default(now()) @map("created_at")

  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([createdAt])
}
